# -*- coding: utf-8 -*-
import os
import sys
from io import StringIO

from setuptools import find_packages, setup

if sys.version_info[0:2] < (3, 5):
    raise RuntimeError("Python version >= 3.5 required.")

path = os.path.abspath(os.path.dirname(__file__))


def get_rustypy_version():
    # import importlib
    # sys.path.append(os.path.join(path, 'src'))
    # mod = importlib.import_module('rustypy')

    # FIXME: get library version dinamically
    return "0.1.17"


rustypy_version = get_rustypy_version()


def generate_description():
    # get long description
    f = os.path.join(path, 'README.md')
    try:
        import pypandoc
        if pypandoc.__version__ == "1.4":
            long_description = '\n' + pypandoc.convert_file(f, 'rst')
        else:
            raise ImportError
    except ImportError:
        import logging
        logging.warning(
            "warning: pypandoc not found or incompatible, could not convert " +
            "Markdown to RST")
        long_description = '\n' + open(f, 'r').read()
    return long_description


def update_crate_version():
    import re
    new_file = StringIO()
    rslib = os.path.join(path, 'src', 'rslib')
    old_ver = re.compile(r'^version = "(.*)"')
    ori_toml = os.path.join(rslib, 'Cargo.toml')
    new_toml = os.path.join(rslib, 'Cargo.temp.toml')
    with open(ori_toml, 'r') as f:
        for l in f:
            ver = re.match(old_ver, l)
            if ver:
                version = 'version = "{}"\n'.format(rustypy_version)
                new_file.write(version)
            else:
                new_file.write(l)
    f = open(new_toml, 'w')
    f.write(new_file.getvalue())
    f.close()
    os.remove(ori_toml)
    os.rename(new_toml, ori_toml)


def build_extension():
    try:
        from setuptools_rust import RustExtension, Binding
    except ImportError:
        import subprocess
        errno = subprocess.call(
            [sys.executable, "-m", "pip", "install", "setuptools-rust"])
        if errno:
            print("Please install setuptools-rust package")
            raise SystemExit(errno)
        else:
            from setuptools_rust import RustExtension, Binding

    import pathlib
    lib_path = pathlib.Path(os.path.abspath(__file__)).parent.joinpath(
        'src', 'librustypy', 'Cargo.toml')
    return [RustExtension("librustypy", path=str(lib_path), binding=Binding.NoBinding)]


setup(
    name="rustypy",
    version=rustypy_version,
    description='Automatic FFI generation for Python <-> Rust interfacing.',
    long_description=generate_description(),
    url='https://github.com/iduartgomez/rustypy',
    author='Ignacio Duart GÃ³mez',
    author_email='iduartgomez@gmail.com',
    license='BSD 3-Clause',
    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Operating System :: POSIX',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Rust',
        'Topic :: Software Development :: Code Generators'
    ],
    keywords='rust autogenerated FFI',
    rust_extensions=build_extension(),
    packages=find_packages('src'),
    package_dir={'': 'src'},
    package_data={'librustypy': ['Cargo.toml', '**/*.rs', '*.rs']},
    setup_requires=[
        'setuptools_rust',
        'wheel'
    ],
    # install_requires=['cffi'],
    entry_points={
        'console_scripts': [
            'rustypy=rustypy.scripts:cli',
        ],
    },
)
